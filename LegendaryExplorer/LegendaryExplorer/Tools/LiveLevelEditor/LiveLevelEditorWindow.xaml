<bases:TrackingNotifyPropertyChangedWindowBase x:Class="LegendaryExplorer.Tools.LiveLevelEditor.LiveLevelEditorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LegendaryExplorer.GameInterop"
        xmlns:bases="clr-namespace:LegendaryExplorer.SharedUI.Bases"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:sharedUi="clr-namespace:LegendaryExplorer.SharedUI"
        xmlns:fa5="http://schemas.fontawesome.com/icons/"
        xmlns:converters="clr-namespace:LegendaryExplorer.SharedUI.Converters"
        xmlns:controls="clr-namespace:LegendaryExplorer.SharedUI.Controls" 
        xmlns:exportLoaderControls="clr-namespace:LegendaryExplorer.UserControls.ExportLoaderControls"
        xmlns:liveLevelEditor="clr-namespace:LegendaryExplorer.Tools.LiveLevelEditor"
        mc:Ignorable="d"
        Icon="pack://application:,,,/Tools/Icons/16x16/LiveLevelEditor_Icon_16.ico"
        d:DataContext="{Binding RelativeSource={RelativeSource Self}}"
        Title="LiveLevelEditor" SizeToContent="WidthAndHeight" Closing="LiveLevelEditor_OnClosing"
        Style="{StaticResource CustomWindowStyle}">
    <Window.Resources>
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter"/>
        <converters:GameToVisibilityConverter x:Key="GameToVisibilityConverter"/>
        <ContextMenu x:Key="packagesContextMenu">
            <MenuItem Header="Open In Package Editor" sharedUi:Bindings.VisibilityToEnabled="True"/>
        </ContextMenu>
        <ContextMenu x:Key="actorsContextMenu">
            <MenuItem Header="Open In Package Editor" Command="{Binding OpenActorInPackEdCommand}"  sharedUi:Bindings.VisibilityToEnabled="True"/>
        </ContextMenu>
    </Window.Resources>
    <xctk:BusyIndicator IsBusy="{Binding Path=IsBusy}">
        <Grid>
            <TabControl>
                <TabItem Name="instructionsTab" Header="Instructions" Visibility="{Binding ReadyToView, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                    <Grid Width="523">
                        <Border BorderBrush="LightSlateGray" BorderThickness="0.65">
                            <StackPanel MinWidth="200" Margin="8">
                                <TextBlock Text="Welcome to Live Level Editor" Margin="0,5,0,0" />
                                <TextBlock Text="Requirements:" Margin="0,5,0,0" />
                                <StackPanel>
                                    <controls:Requirement x:Name="gameInstalledReq"
                                                       FullfilledText="Mass Effect 3 is installed" Margin="0,5,0,5"
                                                       UnFullfilledText="Can't find Mass Effect 3 installation!"
                                                       ButtonText="Set ME3 path"
                                                       Command="{Binding GameInstalledRequirementCommand, RelativeSource={RelativeSource AncestorType={x:Type liveLevelEditor:LiveLevelEditorWindow}}}" />
                                    <controls:Requirement x:Name="asiLoaderInstalledReq"
                                                       FullfilledText="Binkw32 asi loader is installed"
                                                       Margin="0,5,0,5"
                                                       UnFullfilledText="Binkw32 asi loader is not installed!"
                                                       ButtonText="Get dlls"
                                                       Command="{Binding ASILoaderInstalledRequirementCommand, RelativeSource={RelativeSource AncestorType={x:Type liveLevelEditor:LiveLevelEditorWindow}}}" />
                                    <TextBlock Text="For the Live Level Editor to work, it needs to install support files, specifically a mod, DLC_MOD_Interop, and 2 ASIs, ME3ExplorerInterop.asi and ConsoleExtension.asi. DLC_MOD_Interop mounts above all installed mods, uses modified copies of the highest mounted versions of BioP_Global.pcc and BioP_Global_NC.pcc (ME3 only), and should be deleted or regenerated whenever your mod setup changes. Unlike standard DLC mods, this CAN be safely installed after texture mods such as ALOT."
                                               Margin="15,5,15,5" TextWrapping="Wrap"/>
                                    <controls:Requirement x:Name="supportFilesInstalledReq"
                                                                   FullfilledText="DLC_MOD_Interop is installed"
                                                                   Margin="0,5,0,5"
                                                                   UnFullfilledText="DLC_MOD_Interop is not installed or is out of date!"
                                                                   ButtonText="Install DLC_MOD_Interop"
                                                                   Command="{Binding SupportFilesInstalledRequirementCommand, RelativeSource={RelativeSource AncestorType={x:Type liveLevelEditor:LiveLevelEditorWindow}}}" />
                                    <controls:Requirement x:Name="interopASIInstalledReq"
                                                          FullfilledText="Interop ASI is installed"
                                                          Margin="0,5,0,5"
                                                          UnFullfilledText="Interop ASI is not installed or is out of date!"
                                                          ButtonText="Get Interop ASI"
                                                          Command="{Binding InteropASIInstalledRequirementCommand, RelativeSource={RelativeSource AncestorType={x:Type liveLevelEditor:LiveLevelEditorWindow}}}" />
                                    <controls:Requirement x:Name="consoleASIInstalledReq"
                                                          FullfilledText="Console Extension ASI is installed"
                                                          Margin="0,5,0,5"
                                                          UnFullfilledText="Console Extension ASI is not installed or is out of date!"
                                                          ButtonText="Get Console Extension ASI"
                                                          Visibility="{Binding Game, Converter={StaticResource GameToVisibilityConverter}, ConverterParameter='ME3', Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type liveLevelEditor:LiveLevelEditorWindow}}}"
                                                          Command="{Binding ConsoleASIInstalledRequirementCommand, RelativeSource={RelativeSource AncestorType={x:Type liveLevelEditor:LiveLevelEditorWindow}}}" />
                                    <TextBlock Text="Once the above requirements are fulfilled, start the game, load into the level you want to edit, and press the button below."
                                               Margin="15,5,15,5" TextWrapping="Wrap"/>
                                </StackPanel>
                                <Button Name="initializeEditorButton" Content="Initialize Editor"
                                        Margin="20,10,20,0"
                                        Command="{Binding LoadLiveEditorCommand, RelativeSource={RelativeSource AncestorType={x:Type liveLevelEditor:LiveLevelEditorWindow}}}" />
                                <TextBlock Text="When you load into a new level, you will have to initialize the editor again"
                                           Margin="15,5,15,5" TextWrapping="Wrap" HorizontalAlignment="Center"/>
                            </StackPanel>
                        </Border>
                    </Grid>
                </TabItem>
                <TabItem Name="actorTab" Header="Actors" Visibility="{Binding ReadyToView, Converter={StaticResource BoolToVisibilityConverter}}">
                    <DockPanel>
                        <TextBlock DockPanel.Dock="Top" Text="You should regenerate the actor list whenever you move to a new area of the level, as what is loaded may have changed"
                                   Margin="15,5,15,5" TextWrapping="Wrap" MaxWidth="330"/>
                        <Button Margin="15,0,15,6" DockPanel.Dock="Top" Content="Regenerate Actor List" Command="{Binding RegenActorListCommand}"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="5" />
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <controls:ListBoxScroll x:Name="listBoxPackages" ItemsSource="{Binding ActorDict}" DisplayMemberPath="Key" SelectedValuePath="Value" ContextMenu="{StaticResource packagesContextMenu}"/>
                            <GridSplitter Width="5" HorizontalAlignment="Stretch" Grid.Column="1" />
                            <Border BorderBrush="LightSlateGray" BorderThickness="0.65" Grid.Column="2">
                                <controls:ListBoxScroll ItemsSource="{Binding SelectedValue, ElementName=listBoxPackages}" DisplayMemberPath="ActorName" SelectedItem="{Binding SelectedActor}"
                                                        ContextMenu="{StaticResource actorsContextMenu}"/>
                            </Border>
                        </Grid>
                    </DockPanel>
                </TabItem>
                <TabItem Name="optionsTab" Header="Controls/Options" Visibility="{Binding ReadyToView, Converter={StaticResource BoolToVisibilityConverter}}">
                    <StackPanel>
                        <Label Content="Actor Position" Margin="10,0,0,0"/>
                        <Border Margin="10,0,10,10" BorderBrush="#FFD8D8D8" BorderThickness="2" CornerRadius="5">
                            <StackPanel Orientation="Vertical">
                                <StackPanel Orientation="Horizontal">
                                    <!--<Button Content=" Reset Position " Margin="5" Click="SetDefaultPosition_Click" />-->
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text=" X:  " VerticalAlignment="Center" />
                                        <xctk:IntegerUpDown Name="xPosUpDown" Value="{Binding XPos}" Increment="{Binding PosIncrement}"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text=" Y:  " VerticalAlignment="Center"/>
                                        <xctk:IntegerUpDown Name="yPosUpDown" Value="{Binding YPos}" Increment="{Binding PosIncrement}"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text=" Z:  " VerticalAlignment="Center"/>
                                        <xctk:IntegerUpDown Name="zPosUpDown" Value="{Binding ZPos}" Increment="{Binding PosIncrement}"/>
                                    </StackPanel>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text=" Increment:  " VerticalAlignment="Center" />
                                    <xctk:IntegerUpDown Value="{Binding PosIncrement}" Minimum="0"/>
                                </StackPanel>
                            </StackPanel>
                        </Border>
                        <Label Content="Actor Rotation" Margin="10,0,0,0"/>
                        <Border Margin="10,0,10,10" BorderBrush="#FFD8D8D8" BorderThickness="2" CornerRadius="5">
                            <StackPanel Orientation="Vertical">
                                <StackPanel Orientation="Horizontal">
                                    <!--<Button Content=" Reset Rotation " Margin="5" Click="ResetRotation_Click" />-->
                                    <TextBlock Text=" Yaw:  " VerticalAlignment="Center" />
                                    <xctk:IntegerUpDown Name="yawUpDown" Value="{Binding Yaw}" Increment="{Binding RotIncrement}"/>
                                    <TextBlock Text=" Pitch:  " VerticalAlignment="Center" />
                                    <xctk:IntegerUpDown Name="pitchUpDown" Value="{Binding Pitch}" Increment="{Binding RotIncrement}"/>
                                    <TextBlock Text=" Roll:  " VerticalAlignment="Center" 
                                               Visibility="{Binding IsME3, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                    <xctk:IntegerUpDown Name="rollUpDown" Value="{Binding Roll}" Increment="{Binding RotIncrement}"
                                                        Visibility="{Binding IsME3, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text=" Increment:  " VerticalAlignment="Center" />
                                    <xctk:IntegerUpDown Value="{Binding RotIncrement}" Minimum="0" />
                                </StackPanel>
                            </StackPanel>
                        </Border>
                    </StackPanel>
                </TabItem>
                <TabItem Name="camPathTab" Header="Create Camera Path" Visibility="{Binding CamPathReadyToView, Converter={StaticResource BoolToVisibilityConverter}}">
                    <StackPanel>
                        <Label Content="Curve Editor" Margin="10,0,0,0"/>
                        <Border Margin="10,0,10,10" BorderBrush="#FFD8D8D8" BorderThickness="2" CornerRadius="5" Height="438">
                            <TabControl TabStripPlacement="Bottom" >
                                <TabItem Header="Position/Rotation">
                                    <exportLoaderControls:CurveEditor x:Name="Move_CurveEditor"/>
                                </TabItem>
                                <TabItem Header="FOV">
                                    <exportLoaderControls:CurveEditor x:Name="FOV_CurveEditor"/>
                                </TabItem>
                            </TabControl>
                        </Border>
                        <Label Content="Controls" Margin="10,0,0,0"/>
                        <Border Margin="10,0,10,10" BorderBrush="#FFD8D8D8" BorderThickness="2" CornerRadius="5">
                            <StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <Button ToolTip="ce playcam / ce pausecam" Click="PlayPause_Click" Margin="5">
                                        <fa5:ImageAwesome Icon="{Binding PlayPauseIcon}" Height="16" Width="16" Margin="4"/>
                                    </Button>
                                    <Button ToolTip="ce stopcam" Click="StopAnimation_Click" Margin="5">
                                        <fa5:ImageAwesome Icon="Solid_Stop" Height="16" Width="16" Margin="4"/>
                                    </Button>
                                    <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                                        <CheckBox IsChecked="{Binding ShouldLoop}" ToolTip="ce loopcam / ce noloopcam"/>
                                        <TextBlock Text="Loop"/>
                                    </StackPanel>
                                    <Button Click="SaveCamPath" Margin="5">
                                        Save Curve to Game
                                        <!--<Button.Style>
                                            <Style TargetType="{x:Type Button}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=interpTrackMove.EntryHasPendingChanges}" Value="true">
                                                        <Setter Property="Background" Value="#FFFF7B4A"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>-->
                                    </Button>
                                    <Button Click="ClearKeys"  Margin="5">
                                        Clear Keys
                                    </Button>
                                </StackPanel>
                            </StackPanel>
                        </Border>
                        <Label Content="Saved Cameras" Margin="10,0,0,0"/>

                        <Border Margin="10,0,10,10" BorderBrush="#FFD8D8D8" BorderThickness="2" CornerRadius="5">
                            <ListView ItemsSource="{Binding SavedCams}" AlternationCount="10">
                                <ListView.ItemTemplate>
                                    <DataTemplate DataType="local:POV">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{Binding Path=Index}"/>
                                            <Button Content="Add as key" Click="AddSavedCamAsKey" Margin="5 0 5 0"/>
                                            <TextBlock Text="{Binding Path=Str}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                        </Border>
                    </StackPanel>
                </TabItem>
                <TabItem Name="camPathInstructionsTab" Header="Camera Path Instructions" Visibility="{Binding CamPathReadyToView, Converter={StaticResource BoolToVisibilityConverter}}">
                    <StackPanel>
                        <TextBlock Margin="15,5,15,5" TextWrapping="Wrap" Width="475">
                            To populate the Saved Cameras, turn on the flycam with
                            <Run Style="{DynamicResource cmdStyle}">ToggleFlyCam</Run>, then use the
                            <Run Style="{DynamicResource cmdStyle}">savecam</Run> console command followed by the numbers 0-9.
                            (eg. <Run Style="{DynamicResource cmdStyle}">savecam 0</Run> would save the current camera position to the first slot)
                            You can use <Run Style="{DynamicResource cmdStyle}">loadcam</Run> to return to a saved position while in flycam mode.
                        </TextBlock>
                        <TextBlock Margin="15,5,15,5" TextWrapping="Wrap" Width="475">
                            You can add Saved Cameras as keys to the Curve Editor with the Add Key buttons, or create keys manually by right-clicking in the Curve Editor.
                            Rest the Curve Editor with the Clear Keys button. To get your edits to show up in game, use the Save Curve to Game button.
                            You must exit flycam mode before you can play the camera move.
                        </TextBlock>
                        <TextBlock Margin="15,5,15,5" TextWrapping="Wrap" Width="475">
                            Special care must be taken with rotation values from the Saved Cameras. While they will be accurate, the same rotation can be represented in more than one way,
                            and the transition from one to the next may not be what you intended. For example, your first saved cam may have a yaw of 15°, and the second a yaw of 350°.
                            That will result in almost a full rotation when played back, when you probably just wanted a smaller turn the other way around the circle.
                            This can be fixed by subtracting 360 to get a yaw of -10°, which represents the same yaw as 350°, but will result in the camera turning in the opposite direction to get there.
                            The Saved Cameras are a <Run FontStyle="Italic">starting point</Run>, and you will probably have to do quite a bit of manual tweaking to get what you want.
                        </TextBlock>
                    </StackPanel>
                    <TabItem.Resources>
                        <Style x:Key="cmdStyle" TargetType="{x:Type Run}">
                            <Setter Property="FontFamily" Value="Lucida Console"/>
                            <Setter Property="Background" Value="#33000000"/>
                        </Style>
                    </TabItem.Resources>
                </TabItem>
            </TabControl>
        </Grid>
        <xctk:BusyIndicator.BusyContentTemplate>
            <DataTemplate>
                <StackPanel DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                    <!--<TextBlock Text="{Binding BusyHeader}" FontWeight="Bold" TextAlignment="Center"/>-->
                    <TextBlock Text="{Binding BusyText}"/>
                    <ProgressBar IsIndeterminate="True"  Margin="0,5,0,0" Height="15" />
                    <Button Content="Cancel" HorizontalAlignment="center" Margin="0,5,0,0" Padding="3" Command="{Binding CancelBusyCommand}" sharedUi:Bindings.VisibilityToEnabled="True"/>
                </StackPanel>
            </DataTemplate>
        </xctk:BusyIndicator.BusyContentTemplate>
        <xctk:BusyIndicator.ProgressBarStyle>
            <Style TargetType="ProgressBar" >
                <Setter Property="Visibility" Value="Collapsed"/>
            </Style>
        </xctk:BusyIndicator.ProgressBarStyle>
    </xctk:BusyIndicator>
</bases:TrackingNotifyPropertyChangedWindowBase>
